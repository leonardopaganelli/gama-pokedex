{"version":3,"sources":["components/GenerationFilter/GenerationList.js","components/GenerationFilter/GenerationFilter.js","api/pokemonService.js","components/PokemonCard/PokemonCard.js","components/PokemonCardList/PokemonCardList.js","App.js","serviceWorker.js","index.js"],"names":["generationList","name","parameters","offset","limit","props","handleClick","className","map","generation","key","onClick","getPokemonList","a","params","axios","get","getPokemonDetail","useState","sprites","pokemonInfo","setPokemonInfo","loadingInfo","setLoadingInfo","detailVisible","setDetailVisible","useEffect","pokemonService","data","loadPokemonInfo","Card","Body","src","alt","text","order","types","id","stats","typesMapped","currentType","type","statsMapped","currentStats","stat","base_stat","chartData","labels","currentStat","datasets","label","front_default","String","padStart","charAt","toUpperCase","slice","Badge","options","scales","xAxes","ticks","min","max","yAxes","stacked","infoContent","filterParams","results","pokemonData","setPokemonData","loadPokemonData","pokemon","firstGeneration","currentGenerationFilter","setCurrentGenerationFilter","generationSelected","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45063599.chunk.js","sourcesContent":["const generationList = [\n  {\n    name: '1ª Geração',\n    parameters: {\n      offset: 0,\n      limit: 151\n    }\n  },\n  {\n    name: '2ª Geração',\n    parameters: {\n      offset: 151,\n      limit: 100\n    }\n  },\n  {\n    name: '3ª Geração',\n    parameters: {\n      offset: 251,\n      limit: 135\n    }\n  },\n  {\n    name: '4ª Geração',\n    parameters: {\n      offset: 386,\n      limit: 108\n    }\n  },\n  {\n    name: '5ª Geração',\n    parameters: {\n      offset: 494,\n      limit: 155\n    }\n  },\n  {\n    name: '6ª Geração',\n    parameters: {\n      offset: 649,\n      limit: 72\n    }\n  },\n  {\n    name: '7ª Geração',\n    parameters: {\n      offset: 721,\n      limit: 86\n    }\n  },\n  {\n    name: 'Mega Evoluções',\n    parameters: {\n      offset: 839,\n      limit: 47\n    }\n  }\n]\n\nexport default generationList;\n","import React from 'react';\n\nimport generationList from './GenerationList';\n\nimport './GenerationFilter.css';\n\nexport default (props) => {\n  const { handleClick } = props;\n\n  return (\n    <ul className=\"generation-filter\">\n      { generationList.map(generation => (\n        <li\n          key={generation.name}\n          className=\"generation-filter__item\"\n        >\n          <div\n            className=\"generation-filter__item__button\"\n            onClick={() => handleClick(generation)}\n          >\n            { generation.name }\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n}","import axios from 'axios';\n\nexport default {\n  getPokemonList: async (params = { offset: 0, limit: 151}) => axios\n    .get('https://pokeapi.co/api/v2/pokemon', { params}),\n\n  getPokemonDetail: async (name) => axios\n    .get(`https://pokeapi.co/api/v2/pokemon/${name}/`)\n}","import React, { useState, useEffect } from 'react';\n\nimport { HorizontalBar } from 'react-chartjs-2';\n\nimport Card from 'react-bootstrap/Card';\nimport Badge from 'react-bootstrap/Badge';\n\nimport pokemonService from '../../api/pokemonService';\n\nimport './PokemonCard.css';\nimport './TypeColors.css';\n\nexport default (props) => {\n  const { name } = props;\n  const loadingImage = 'https://thumbs.gfycat.com/DampSpanishCleanerwrasse-size_restricted.gif'\n\n  const [pokemonInfo, setPokemonInfo] = useState({\n    sprites: {}\n  });\n\n  const [loadingInfo, setLoadingInfo] = useState(true);\n  const [detailVisible, setDetailVisible] = useState(false);\n\n  useEffect(() => {\n    const loadPokemonInfo = async () => {\n      const { data } = await pokemonService.getPokemonDetail(name);\n\n      setPokemonInfo(data);\n      setLoadingInfo(false);\n    };\n\n    loadPokemonInfo();\n  }, []);\n\n  const formatOrder = (order) => order < 1000\n      ? `#${String(order).padStart(3, '0')} - `\n      : '';\n\n  const capitalizeText = (text) => `${text.charAt(0).toUpperCase()}${text.slice(1)}`;\n\n  const loadingContent = () => (\n    <Card className=\"pokemon-card__loading-content\">\n      <Card.Body>\n        <img\n          className=\"pokemon-card__loading-content__image\"\n          src={loadingImage}\n          alt=\"Carregando informações do pokemon\"\n        />\n      </Card.Body>\n    </Card>\n  );\n\n  const infoContent = (pokemonInfo) => {\n    const {\n      sprites,\n      types,\n      id,\n      stats,\n    } = pokemonInfo;\n\n    const typesMapped = types\n      .map(currentType => currentType.type.name)\n\n    const statsMapped = stats\n      .map(currentStats => ({\n        name: currentStats.stat.name,\n        stat: currentStats.base_stat\n      }))\n\n    const chartData = {\n      labels: statsMapped.map(currentStat => currentStat.name),\n      datasets: [{\n        label: name,\n        data: statsMapped.map(currentStat => currentStat.stat),\n      }]\n    }\n\n    const chartOptions = {\n      scales: {\n        xAxes: [{\n          ticks: {\n            min: 0,\n            max: 255\n          }\n        }],\n        yAxes: [{\n            stacked: true\n        }]\n      }\n    }\n\n    return (\n      <div\n        className={`pokemon-card__content bg-${typesMapped[0]} ${detailVisible ? '--detail-open' : ''}`}\n        onClick={() => (setDetailVisible(!detailVisible))}\n      >\n        <img\n          className=\"pokemon-card__content__image\"\n          alt={`Imagem do ${name}`}\n          src={sprites.front_default}\n        />\n        <Card>\n          <Card.Body>\n            <div className=\"pokemon-card__content__info\">\n              { `${formatOrder(id)}${capitalizeText(name)}` }\n            </div>\n\n            { typesMapped.map(type => (\n              <Badge\n                key={type}\n                className=\"pokemon-card__content__type\"\n              >\n                { type }\n              </Badge>\n            )) }\n          </Card.Body>\n        </Card>\n        <div className=\"pokemon-card__content__detail\">\n          <HorizontalBar\n            data={chartData}\n            options={chartOptions}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"pokemon-card\">\n      { loadingInfo && loadingContent()}\n      { !loadingInfo && infoContent(pokemonInfo)}\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\n\nimport PokemonCard from '../PokemonCard/PokemonCard';\n\nimport pokemonService from '../../api/pokemonService';\n\nimport './PokemonCardList.css';\n\nexport default (props) => {\n  const { filterParams } = props;\n\n  const [pokemonData, setPokemonData] = useState({\n    results: []\n  });\n\n  useEffect(() => {\n    const loadPokemonData = async () => {\n      const { data } = await pokemonService\n        .getPokemonList(filterParams);\n\n      setPokemonData(data);\n    };\n\n    loadPokemonData();\n  }, [filterParams]);\n\n  return (\n    <ul className=\"pokemon-card-list\">\n      { pokemonData.results.map(pokemon => (\n        <PokemonCard\n          key={pokemon.name}\n          name={pokemon.name}\n        />\n      ))}\n    </ul>\n  );\n}","import React, { useState } from 'react';\n\nimport GenerationFilter from './components/GenerationFilter/GenerationFilter'\nimport PokemonCardList from './components/PokemonCardList/PokemonCardList'\n\nimport generationList from './components/GenerationFilter/GenerationList'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nexport default () => {\n  const [ firstGeneration ] = generationList;\n\n  const [\n    currentGenerationFilter,\n    setCurrentGenerationFilter\n  ] = useState(firstGeneration)\n\n  return (\n    <div className=\"pokedex-app\">\n      <GenerationFilter handleClick={\n        (generationSelected) => setCurrentGenerationFilter(generationSelected)\n      } />\n      <PokemonCardList filterParams={currentGenerationFilter.parameters} />\n    </div>\n  );\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}